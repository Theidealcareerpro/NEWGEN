// app/api/deploy/route.ts
import { NextResponse } from "next/server"
import { Octokit } from "@octokit/rest"
import { supabaseServer } from "@/lib/supabase-server"
import { buildStaticFiles } from "@/lib/portfolio-build"
import type { PortfolioData } from "@/lib/portfolio-types"

type DeployRequestBody = {
  data: PortfolioData
  fingerprint: string
  templateId?: "modern" | "classic" | "minimal"
}

const GITHUB_ORG = process.env.GITHUB_ORG as string
const GITHUB_AUTH_TOKEN = process.env.GITHUB_AUTH_TOKEN as string

if (!GITHUB_ORG || !GITHUB_AUTH_TOKEN) {
  throw new Error("Missing GITHUB_ORG or GITHUB_AUTH_TOKEN in environment")
}

export async function POST(req: Request) {
  try {
    const body: DeployRequestBody = await req.json()
    const { data, fingerprint } = body

    if (!fingerprint) {
      return NextResponse.json(
        { error: "Missing fingerprint" },
        { status: 400 }
      )
    }

    // 0) Enforce basic quotas (optional: you can extend)
    // Ensure there is a row (idempotent upsert)
    await supabaseServer
      .from("usage_tracking")
      .upsert({ fingerprint }, { onConflict: "fingerprint" })

    const octokit = new Octokit({ auth: GITHUB_AUTH_TOKEN })
    const repoName = `portfolio-${fingerprint.slice(0, 8)}-${Date.now()}`

    // 1) Create repo in org (auto_init true â†’ branch main exists)
    await octokit.rest.repos.createInOrg({
      org: GITHUB_ORG,
      name: repoName,
      private: false,
      auto_init: true,
      description: "Portfolio generated by TheIdealProGen",
    })

    // 2) Build static site files (index.html + styles.css)
    const files = buildStaticFiles(data)

    // 3) Commit files via "create or update file contents" API on branch main
    const owner = GITHUB_ORG
    const repo = repoName
    const branch = "main"

    for (const [path, content] of Object.entries(files)) {
      await octokit.rest.repos.createOrUpdateFileContents({
        owner,
        repo,
        path,
        message: `Add ${path}`,
        content: Buffer.from(content, "utf8").toString("base64"),
        branch,
      })
    }

    // 4) Enable GitHub Pages using main as source
    // Note: Some orgs require Pages to be enabled at org level.
    await octokit.request("POST /repos/{owner}/{repo}/pages", {
      owner,
      repo,
      source: { branch, path: "/" },
      // build_type: "legacy" // not required usually; default is fine
    })

    // 5) Construct Pages URL (usually {org}.github.io/{repo})
    const pagesUrl = `https://${owner}.github.io/${repo}`

    // 6) Update Supabase usage tracking (expiry + metadata)
    const now = Date.now()
    const expiry21Days = new Date(now + 21 * 24 * 60 * 60 * 1000).toISOString()
    const nextEligible = new Date(now + 90 * 24 * 60 * 60 * 1000).toISOString()

    await supabaseServer
      .from("usage_tracking")
      .update({
        portfolio_count: 1,
        last_created: new Date(now).toISOString(),
        next_eligible_at: nextEligible,
        last_repo: repoName,
        last_pages_url: pagesUrl,
        expiry_date: expiry21Days,
      })
      .eq("fingerprint", fingerprint)

    return NextResponse.json({ success: true, url: pagesUrl })
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message)
      return NextResponse.json({ error: error.message }, { status: 500 })
    }
    return NextResponse.json({ error: "Unknown error" }, { status: 500 })
  }
}
